name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: nft-church-dev.cr.cloud.ru
  IMAGE_NAME: frontend
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  PROJECT_PATH: /opt/nft-church

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.EVO_CR_LOGIN_DEV }}
        password: ${{ secrets.EVO_CR_PWD_DEV }}

    - name: Build and Push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate configs
      run: |
        required_files=("docker-compose.yml" "Dockerfile" "setup_nginx.sh")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "::error file=$file::Missing required file"
            exit 1
          fi
        done

    - name: Set up SSH
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

    - name: Copy Dockerfile to VM
      run: |
        scp Dockerfile ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.PROJECT_PATH }}/Dockerfile.frontend
    - name: Copy docker-compose.yml to VM
      run: |
        scp docker-compose.yml ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.PROJECT_PATH }}/docker-compose.yml
    - name: Copy setup_nginx.sh to VM
      run: |
        scp setup_nginx.sh ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.PROJECT_PATH }}/setup_nginx.sh
        ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "chmod +x ${{ env.PROJECT_PATH }}/setup_nginx.sh"

    - name: Sync files
      run: |
        rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
          --rsync-path="sudo rsync" \
          ./docker/ \
          ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.PROJECT_PATH }}/

    - name: Deploy stack
      run: |
        ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << 'EOF'
        cd ${{ env.PROJECT_PATH }}
        docker compose -f docker-compose.yml down
        docker compose -f docker-compose.yml up -d --build
        EOF

    - name: Post-deploy check
      run: |
        ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          curl -I http://localhost || exit 1
        "